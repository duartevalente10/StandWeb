// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using StandWeb.Data;

namespace StandWeb.Data.Migrations
{
    [DbContext(typeof(GostosDB))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.3")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");

                    b.HasData(
                        new
                        {
                            Id = "c",
                            ConcurrencyStamp = "48a4f00c-a694-4d7f-885f-7e19946a7478",
                            Name = "Cliente",
                            NormalizedName = "CLIENTE"
                        },
                        new
                        {
                            Id = "g",
                            ConcurrencyStamp = "b86a0a79-f517-48f0-b247-e15da7ddba41",
                            Name = "Gestor",
                            NormalizedName = "GESTOR"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("StandWeb.Data.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DataRegisto")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("StandWeb.Models.Carros", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Ano")
                        .HasColumnType("int");

                    b.Property<int>("Cilindrada")
                        .HasColumnType("int");

                    b.Property<string>("Combustivel")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("MarcaFK")
                        .HasColumnType("int");

                    b.Property<string>("Modelo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Potencia")
                        .HasColumnType("int");

                    b.Property<int>("Preco")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("MarcaFK");

                    b.ToTable("Carros");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Ano = 2010,
                            Cilindrada = 8000,
                            Combustivel = "Gasolina",
                            MarcaFK = 1,
                            Modelo = "Bugatti Veyron",
                            Potencia = 1400,
                            Preco = 2300000
                        },
                        new
                        {
                            Id = 2,
                            Ano = 2018,
                            Cilindrada = 9000,
                            Combustivel = "Gasolina",
                            MarcaFK = 1,
                            Modelo = "Bugatti Chiron",
                            Potencia = 1600,
                            Preco = 2800000
                        },
                        new
                        {
                            Id = 3,
                            Ano = 2021,
                            Cilindrada = 10000,
                            Combustivel = "Gasolina",
                            MarcaFK = 1,
                            Modelo = "Bugatti Divo",
                            Potencia = 1700,
                            Preco = 5000000
                        },
                        new
                        {
                            Id = 4,
                            Ano = 2019,
                            Cilindrada = 8000,
                            Combustivel = "Hibrido",
                            MarcaFK = 3,
                            Modelo = "McLaren P1",
                            Potencia = 1600,
                            Preco = 1300000
                        },
                        new
                        {
                            Id = 5,
                            Ano = 2020,
                            Cilindrada = 7000,
                            Combustivel = "Hibrido",
                            MarcaFK = 3,
                            Modelo = "McLaren Senna",
                            Potencia = 1200,
                            Preco = 1000000
                        },
                        new
                        {
                            Id = 6,
                            Ano = 2021,
                            Cilindrada = 9000,
                            Combustivel = "Hibrido",
                            MarcaFK = 4,
                            Modelo = "Lamborgini Sian",
                            Potencia = 1500,
                            Preco = 3700000
                        },
                        new
                        {
                            Id = 7,
                            Ano = 2021,
                            Cilindrada = 8000,
                            Combustivel = "Hibrido",
                            MarcaFK = 5,
                            Modelo = "Koenigsegg Gemera",
                            Potencia = 1500,
                            Preco = 1900000
                        },
                        new
                        {
                            Id = 8,
                            Ano = 2019,
                            Cilindrada = 9000,
                            Combustivel = "Gasolina",
                            MarcaFK = 5,
                            Modelo = "Koenigsegg Jesko",
                            Potencia = 1700,
                            Preco = 2500000
                        },
                        new
                        {
                            Id = 9,
                            Ano = 2018,
                            Cilindrada = 5000,
                            Combustivel = "Hibrido",
                            MarcaFK = 6,
                            Modelo = "Ferrari Laferrari ",
                            Potencia = 850,
                            Preco = 2000000
                        },
                        new
                        {
                            Id = 10,
                            Ano = 2013,
                            Cilindrada = 6000,
                            Combustivel = "Gasolina",
                            MarcaFK = 7,
                            Modelo = "Porche Carrera gt",
                            Potencia = 800,
                            Preco = 1900000
                        },
                        new
                        {
                            Id = 11,
                            Ano = 2021,
                            Cilindrada = 10000,
                            Combustivel = "Eletrico",
                            MarcaFK = 8,
                            Modelo = "Rimac Nevera",
                            Potencia = 2000,
                            Preco = 100000
                        },
                        new
                        {
                            Id = 12,
                            Ano = 2017,
                            Cilindrada = 8000,
                            Combustivel = "Gasolina",
                            MarcaFK = 2,
                            Modelo = "Paggani Huayra",
                            Potencia = 1300,
                            Preco = 300000
                        });
                });

            modelBuilder.Entity("StandWeb.Models.Clientes", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CodPostal")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("Email")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Morada")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)");

                    b.Property<string>("Telemovel")
                        .HasMaxLength(14)
                        .HasColumnType("nvarchar(14)");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Clientes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CodPostal = "2305 - 515 PAIALVO",
                            Email = "Marisa.Freitas@iol.pt",
                            Morada = "Largo do Pelourinho",
                            Nome = "Marisa Vieira",
                            Telemovel = "967197885"
                        },
                        new
                        {
                            Id = 2,
                            CodPostal = "2300 - 551 TOMAR",
                            Email = "Fátima.Machado@gmail.com",
                            Morada = "Praça Infante Dom Henrique",
                            Nome = "Fátima Ribeiro",
                            Telemovel = "963737476"
                        },
                        new
                        {
                            Id = 4,
                            CodPostal = "2300 - 324 TOMAR",
                            Email = "Paula.Lopes@iol.pt",
                            Morada = "Bairro Pimenta",
                            Nome = "Paula Silva",
                            Telemovel = "967517256"
                        },
                        new
                        {
                            Id = 5,
                            CodPostal = "2305 - 127 ASSEICEIRA TMR",
                            Email = "Mariline.Martins@sapo.pt",
                            Morada = "Zona Industrial",
                            Nome = "Mariline Marques",
                            Telemovel = "967212144"
                        },
                        new
                        {
                            Id = 6,
                            CodPostal = "2475 - 013 BENEDITA",
                            Email = "Marcos.Rocha@sapo.pt",
                            Morada = "Rua de Bacelos",
                            Nome = "Marcos Rocha",
                            Telemovel = "962125638"
                        },
                        new
                        {
                            Id = 7,
                            CodPostal = "7630 - 782 ZAMBUJEIRA DO MAR",
                            Email = "Alexandre.Dias@hotmail.com",
                            Morada = "Rua João Pedro Costa",
                            Nome = "Alexandre Vieira",
                            Telemovel = "961493756"
                        },
                        new
                        {
                            Id = 8,
                            CodPostal = "2300 - 551 TOMAR",
                            Email = "Paula.Vieira@clix.pt",
                            Morada = "Praça Infante Dom Henrique",
                            Nome = "Paula Soares",
                            Telemovel = "961937768"
                        },
                        new
                        {
                            Id = 9,
                            CodPostal = "2300 - 390 TOMAR",
                            Email = "Mariline.Ribeiro@iol.pt",
                            Morada = "Rua Corredora do Mestre (Palhavã de Cima)",
                            Nome = "Mariline Santos",
                            Telemovel = "964106478"
                        },
                        new
                        {
                            Id = 10,
                            CodPostal = "2300 - 635 TOMAR",
                            Email = "Roberto.Vieira@sapo.pt",
                            Morada = "Largo do Flecheiro",
                            Nome = "Roberto Pinto",
                            Telemovel = "964685937"
                        });
                });

            modelBuilder.Entity("StandWeb.Models.Fotografias", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CarroFK")
                        .HasColumnType("int");

                    b.Property<DateTime>("DataFoto")
                        .HasColumnType("datetime2");

                    b.Property<string>("Fotografia")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Local")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CarroFK");

                    b.ToTable("Fotografias");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CarroFK = 1,
                            DataFoto = new DateTime(2019, 5, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Fotografia = "veyron.jpg",
                            Local = "Stand"
                        },
                        new
                        {
                            Id = 2,
                            CarroFK = 2,
                            DataFoto = new DateTime(2019, 5, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Fotografia = "chiron.jpg",
                            Local = "Stand"
                        },
                        new
                        {
                            Id = 3,
                            CarroFK = 3,
                            DataFoto = new DateTime(2019, 11, 18, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Fotografia = "divo.jpg",
                            Local = "Stand"
                        },
                        new
                        {
                            Id = 4,
                            CarroFK = 4,
                            DataFoto = new DateTime(2021, 1, 17, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Fotografia = "P1.jpg",
                            Local = "Stand"
                        },
                        new
                        {
                            Id = 5,
                            CarroFK = 5,
                            DataFoto = new DateTime(2019, 3, 7, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Fotografia = "senna.jpg",
                            Local = "Stand"
                        },
                        new
                        {
                            Id = 6,
                            CarroFK = 6,
                            DataFoto = new DateTime(2013, 10, 21, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Fotografia = "sian.jpg",
                            Local = "Stand"
                        },
                        new
                        {
                            Id = 7,
                            CarroFK = 7,
                            DataFoto = new DateTime(2012, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Fotografia = "gemera.jpg",
                            Local = "Stand"
                        },
                        new
                        {
                            Id = 8,
                            CarroFK = 8,
                            DataFoto = new DateTime(2020, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Fotografia = "jesko.jpg",
                            Local = "Stand"
                        },
                        new
                        {
                            Id = 9,
                            CarroFK = 9,
                            DataFoto = new DateTime(2011, 1, 4, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Fotografia = "LaFerrari.jpg",
                            Local = "Stand"
                        },
                        new
                        {
                            Id = 10,
                            CarroFK = 10,
                            DataFoto = new DateTime(2020, 12, 6, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Fotografia = "CarreraGT.jpg",
                            Local = "Stand"
                        },
                        new
                        {
                            Id = 11,
                            CarroFK = 11,
                            DataFoto = new DateTime(2018, 12, 23, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Fotografia = "nevera.jpg",
                            Local = "Stand"
                        },
                        new
                        {
                            Id = 12,
                            CarroFK = 12,
                            DataFoto = new DateTime(2017, 1, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Fotografia = "Huayra.jpg",
                            Local = "Stand"
                        });
                });

            modelBuilder.Entity("StandWeb.Models.Gostos", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CarroFK")
                        .HasColumnType("int");

                    b.Property<int>("ClienteFK")
                        .HasColumnType("int");

                    b.Property<DateTime>("DataCompra")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CarroFK");

                    b.HasIndex("ClienteFK");

                    b.ToTable("Gostos");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CarroFK = 1,
                            ClienteFK = 1,
                            DataCompra = new DateTime(2019, 6, 15, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 2,
                            CarroFK = 2,
                            ClienteFK = 2,
                            DataCompra = new DateTime(2019, 12, 9, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 3,
                            CarroFK = 3,
                            ClienteFK = 4,
                            DataCompra = new DateTime(2011, 5, 21, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 4,
                            CarroFK = 4,
                            ClienteFK = 5,
                            DataCompra = new DateTime(2008, 8, 7, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 5,
                            CarroFK = 5,
                            ClienteFK = 6,
                            DataCompra = new DateTime(2012, 10, 20, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 6,
                            CarroFK = 6,
                            ClienteFK = 7,
                            DataCompra = new DateTime(2010, 11, 30, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 7,
                            CarroFK = 7,
                            ClienteFK = 8,
                            DataCompra = new DateTime(2011, 2, 9, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 8,
                            CarroFK = 8,
                            ClienteFK = 9,
                            DataCompra = new DateTime(2013, 6, 21, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 9,
                            CarroFK = 9,
                            ClienteFK = 10,
                            DataCompra = new DateTime(2011, 7, 9, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 10,
                            CarroFK = 10,
                            ClienteFK = 5,
                            DataCompra = new DateTime(2017, 5, 20, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 11,
                            CarroFK = 11,
                            ClienteFK = 8,
                            DataCompra = new DateTime(2018, 3, 5, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 12,
                            CarroFK = 11,
                            ClienteFK = 8,
                            DataCompra = new DateTime(2018, 3, 5, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("StandWeb.Models.Marcas", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Nome")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Marcas");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Nome = "Buggati"
                        },
                        new
                        {
                            Id = 2,
                            Nome = "Pagani"
                        },
                        new
                        {
                            Id = 3,
                            Nome = "McLaren"
                        },
                        new
                        {
                            Id = 4,
                            Nome = "Lamborghini"
                        },
                        new
                        {
                            Id = 5,
                            Nome = "Koenigsegg"
                        },
                        new
                        {
                            Id = 6,
                            Nome = "Ferrari"
                        },
                        new
                        {
                            Id = 7,
                            Nome = "Porsche"
                        },
                        new
                        {
                            Id = 8,
                            Nome = "Rimac"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("StandWeb.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("StandWeb.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StandWeb.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("StandWeb.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("StandWeb.Models.Carros", b =>
                {
                    b.HasOne("StandWeb.Models.Marcas", "Marca")
                        .WithMany("ListaDeCarros")
                        .HasForeignKey("MarcaFK")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Marca");
                });

            modelBuilder.Entity("StandWeb.Models.Fotografias", b =>
                {
                    b.HasOne("StandWeb.Models.Carros", "Carro")
                        .WithMany("ListasDeFotografias")
                        .HasForeignKey("CarroFK")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Carro");
                });

            modelBuilder.Entity("StandWeb.Models.Gostos", b =>
                {
                    b.HasOne("StandWeb.Models.Carros", "Carro")
                        .WithMany("ListaClientes")
                        .HasForeignKey("CarroFK")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StandWeb.Models.Clientes", "Cliente")
                        .WithMany("ListaDeCarros")
                        .HasForeignKey("ClienteFK")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Carro");

                    b.Navigation("Cliente");
                });

            modelBuilder.Entity("StandWeb.Models.Carros", b =>
                {
                    b.Navigation("ListaClientes");

                    b.Navigation("ListasDeFotografias");
                });

            modelBuilder.Entity("StandWeb.Models.Clientes", b =>
                {
                    b.Navigation("ListaDeCarros");
                });

            modelBuilder.Entity("StandWeb.Models.Marcas", b =>
                {
                    b.Navigation("ListaDeCarros");
                });
#pragma warning restore 612, 618
        }
    }
}
